{"ast":null,"code":"/*\nimport { useEffect } from \"react\";\n\nimport { useState } from \"react\";\n\nimport React from \"react\";\n\nexport default function FunctionFetch({ name }) {\n    \n    const [censuses, setCensuses] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(false)\n\n    // UseEffect React Hook has access to the state.\n    useEffect(() =>  {\n        var URL = \"http://localhost:8000/api/census?name=\"+name\n        fetch((URL))\n        .then(res => res.json())\n        .then (\n             (data) => {\n                 setIsLoaded(true);\n                 setCensuses(data);\n             },\n             (error) => {\n                 setIsLoaded(true);\n                 setCensuses(error)\n             }\n         )\n    },[name])\n     // the array is to tell useEffect function of any dependencies; in this case-- name.\n    \n    \n     // In the return curly braces are used for evaluation purposes. For example: if (error) create the div tag.\n    // if not isloaded, create the Loading... message. else create the unordered list.\n    return (\n        <div>\n           {/!* {error &&\n                <div>Error: {error.message}</div>}\n            {!isLoaded ?\n                <div>Loading...</div> :\n                <ul className=\"list-group\">\n\n                    {censuses.map((s) => ((<li className=\"list-group-item\" key={s.city}>{s.city.replace('city', ',')}: population {s.census}</li>)))}\n                </ul>}*!/}\n\n\n        </div>\n    );\n}\n*/","map":{"version":3,"sources":["A:/WebstormProjects/MERN/reactapp/src/components/FunctionFetch.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*\nimport { useEffect } from \"react\";\n\nimport { useState } from \"react\";\n\nimport React from \"react\";\n\nexport default function FunctionFetch({ name }) {\n    \n    const [censuses, setCensuses] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(false)\n\n    // UseEffect React Hook has access to the state.\n    useEffect(() =>  {\n        var URL = \"http://localhost:8000/api/census?name=\"+name\n        fetch((URL))\n        .then(res => res.json())\n        .then (\n             (data) => {\n                 setIsLoaded(true);\n                 setCensuses(data);\n             },\n             (error) => {\n                 setIsLoaded(true);\n                 setCensuses(error)\n             }\n         )\n    },[name])\n     // the array is to tell useEffect function of any dependencies; in this case-- name.\n    \n    \n     // In the return curly braces are used for evaluation purposes. For example: if (error) create the div tag.\n    // if not isloaded, create the Loading... message. else create the unordered list.\n    return (\n        <div>\n           {/!* {error &&\n                <div>Error: {error.message}</div>}\n            {!isLoaded ?\n                <div>Loading...</div> :\n                <ul className=\"list-group\">\n\n                    {censuses.map((s) => ((<li className=\"list-group-item\" key={s.city}>{s.city.replace('city', ',')}: population {s.census}</li>)))}\n                </ul>}*!/}\n\n\n        </div>\n    );\n}\n*/\n"]},"metadata":{},"sourceType":"module"}