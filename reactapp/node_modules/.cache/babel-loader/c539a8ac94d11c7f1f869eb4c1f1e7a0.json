{"ast":null,"code":"var _jsxFileName = \"A:\\\\WebstormProjects\\\\MERN\\\\reactapp\\\\src\\\\components\\\\ClassFetch.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ClassFetch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      censuses: []\n    };\n  }\n\n  componentDidMount() {\n    const name = this.props.name;\n    var URL = \"http://localhost:8080/api/census?name=\" + name;\n    fetch(URL).then(resp => resp.json()).then(data => {\n      this.setState({\n        isLoaded: true,\n        censuses: data\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      censuses\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: censuses.map(s => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [s.city.replace('city', ','), \": population \", s.census]\n        }, s.city, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 47\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default ClassFetch;","map":{"version":3,"sources":["A:/WebstormProjects/MERN/reactapp/src/components/ClassFetch.js"],"names":["React","Component","ClassFetch","constructor","props","state","error","isLoaded","censuses","componentDidMount","name","URL","fetch","then","resp","json","data","setState","render","message","map","s","city","replace","census"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAC/BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAKH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,IAAI,GAAG,KAAKN,KAAL,CAAWM,IAAxB;AACA,QAAIC,GAAG,GAAG,2CAA0CD,IAApD;AACAE,IAAAA,KAAK,CAAED,GAAF,CAAL,CACKE,IADL,CACUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADlB,EAEKF,IAFL,CAGSG,IAAD,IAAU;AACN,WAAKC,QAAL,CACC;AACIV,QAAAA,QAAQ,EAAE,IADd;AAEIC,QAAAA,QAAQ,EAAEQ;AAFd,OADD;AAMP,KAVL,EAWKV,KAAD,IAAW;AACP,WAAKW,QAAL,CACI;AACIV,QAAAA,QAAQ,EAAC,IADb;AAEID,QAAAA;AAFJ,OADJ;AAMH,KAlBL;AAoBH;;AAEDY,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEZ,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAAgC,KAAKH,KAA3C;;AACA,QAAIC,KAAJ,EAAW;AACP,0BAAO;AAAA,8BAAaA,KAAK,CAACa,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAEO,IAAI,CAACZ,QAAL,EAAe;AAClB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFM,MAEA;AACH,0BACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBACQC,QAAQ,CAACY,GAAT,CAAcC,CAAD,iBAAS;AAAI,UAAA,SAAS,EAAC,iBAAd;AAAA,qBAA8CA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAA9C,mBAAwFF,CAAC,CAACG,MAA1F;AAAA,WAAqCH,CAAC,CAACC,IAAvC;AAAA;AAAA;AAAA;AAAA,gBAAtB;AADR;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH;AACJ;;AAjD8B;;AAmDnC,eAAepB,UAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass ClassFetch extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            isLoaded: false,\n            censuses: []\n        };\n    }\n    componentDidMount() {\n        const name = this.props.name;\n        var URL = \"http://localhost:8080/api/census?name=\" +name;\n        fetch((URL))\n            .then(resp => resp.json())\n            .then (\n                (data) => {\n                    this.setState(\n                     {\n                         isLoaded: true,\n                         censuses: data\n                    }\n                );\n            },\n            (error) => {\n                this.setState(\n                    {\n                        isLoaded:true,\n                        error\n                    }\n                );\n            }\n        )\n    }\n\n    render() {\n        const { error, isLoaded, censuses } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <ul className=\"list-group\">\n                       {censuses.map((s) => ((<li className=\"list-group-item\" key={s.city}>{s.city.replace('city', ',')}: population {s.census}</li>)))}\n                </ul>\n\n            );\n        }\n    }\n}\nexport default ClassFetch;"]},"metadata":{},"sourceType":"module"}