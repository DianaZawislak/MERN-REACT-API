{"ast":null,"code":"var _jsxFileName = \"A:\\\\WebstormProjects\\\\MERN\\\\reactapp\\\\src\\\\components\\\\FunctionFetch.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FunctionFetch(_ref) {\n  _s();\n\n  let {\n    name\n  } = _ref;\n  const [censuses, setCensuses] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(false); // UseEffect React Hook has access to the state.\n\n  useEffect(() => {\n    var URL = \"http://localhost:8000/api/census?name=\" + name;\n    fetch(URL).then(res => res.json()).then(data => {\n      setIsLoaded(true);\n      setCensuses(data);\n    }, error => {\n      setIsLoaded(true);\n      setCensuses(error);\n    });\n  }, [name]); // the array is to tell useEffect function of any dependencies; in this case-- name.\n  // In the return curly braces are used for evaluation purposes. For example: if (error) create the div tag.\n  // if not isloaded, create the Loading... message. else create the unordered list.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FunctionFetch, \"I1N1cd9R/ew26tgfVBbvF7omU6E=\");\n\n_c = FunctionFetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionFetch\");","map":{"version":3,"sources":["A:/WebstormProjects/MERN/reactapp/src/components/FunctionFetch.js"],"names":["useEffect","useState","React","FunctionFetch","name","censuses","setCensuses","isLoaded","setIsLoaded","error","setError","URL","fetch","then","res","json","data"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,aAAT,OAAiC;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAE5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC,CAJ4C,CAM5C;;AACAD,EAAAA,SAAS,CAAC,MAAO;AACb,QAAIW,GAAG,GAAG,2CAAyCP,IAAnD;AACAQ,IAAAA,KAAK,CAAED,GAAF,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAGMG,IAAD,IAAU;AACNR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,WAAW,CAACU,IAAD,CAAX;AACH,KANN,EAOMP,KAAD,IAAW;AACPD,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,WAAW,CAACG,KAAD,CAAX;AACH,KAVN;AAYH,GAdQ,EAcP,CAACL,IAAD,CAdO,CAAT,CAP4C,CAsB3C;AAGA;AACD;;AACA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAzCuBD,a;;KAAAA,a","sourcesContent":["import { useEffect } from \"react\";\n\nimport { useState } from \"react\";\n\nimport React from \"react\";\n\nexport default function FunctionFetch({ name }) {\n    \n    const [censuses, setCensuses] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(false)\n\n    // UseEffect React Hook has access to the state.\n    useEffect(() =>  {\n        var URL = \"http://localhost:8000/api/census?name=\"+name\n        fetch((URL))\n        .then(res => res.json())\n        .then (\n             (data) => {\n                 setIsLoaded(true);\n                 setCensuses(data);\n             },\n             (error) => {\n                 setIsLoaded(true);\n                 setCensuses(error)\n             }\n         )\n    },[name])\n     // the array is to tell useEffect function of any dependencies; in this case-- name.\n    \n    \n     // In the return curly braces are used for evaluation purposes. For example: if (error) create the div tag.\n    // if not isloaded, create the Loading... message. else create the unordered list.\n    return (\n        <div>\n           {/* {error &&\n                <div>Error: {error.message}</div>}\n            {!isLoaded ?\n                <div>Loading...</div> :\n                <ul className=\"list-group\">\n\n                    {censuses.map((s) => ((<li className=\"list-group-item\" key={s.city}>{s.city.replace('city', ',')}: population {s.census}</li>)))}\n                </ul>}*/}\n\n\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}